{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript-lessons/react-lessons/src/Car/Car.js\";\nimport React, { Component } from 'react';\nimport Radium from 'radium';\nimport './Car.css'; // теперь компонент Car наследуется от реакт компонента, теперь доступен локальный стейт(хз что это) и разные жизненные циклы\n\nclass Car extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    console.log('Car componentWillReceiveProps', nextProps);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Car shouldComponentUpdate', nextProps, nextState);\n    return nextProps.name.trim() !== this.props.name.trim();\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    console.log('Car componentWillUpdate', nextProps, nextState);\n  } //делает то же самое что и WillUpdate но запрещает работу с преобразованием стейта на прямую\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    console.log('Car getDerivedStateFromProps', nextProps, prevState);\n    return {\n      prevState\n    };\n  }\n\n  componentDidUpdate() {\n    console.log('Car componentDidUpdate');\n  } //позволяет получить не изменённое дом дерево ещё до обновления\n\n\n  getSnapshotBeforeUpdate() {\n    console.log('Car getSnapshotBeforeUpdate');\n  }\n\n  componentWillUnmount() {\n    console.log('Car componentWillUnmount');\n  }\n\n  render() {\n    console.log('Car render');\n    const inputClasses = ['input'];\n\n    if (this.props.name !== '') {\n      inputClasses.push('green');\n    } else {\n      inputClasses.push('red');\n    }\n\n    if (this.props.name.length > 4) {\n      inputClasses.push('bold');\n    }\n\n    const style = {\n      border: '3px solid #ccc',\n      boxShadow: '0 4px 5px 0 rgba(0,0,0, .14)',\n      ':hover': {\n        //псевдоселектор с которым при наведении мышки на обьект он будет выделятся\n        border: '2px solid #aaa',\n        boxShadow: '0 4px 15px 0 rgba(0,0,0, .25)',\n        cursor: 'pointer'\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"Car\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Car name: \", this.props.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Year: \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.props.year)), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChangeName,\n      value: this.props.name,\n      className: inputClasses.join(' ') //данный параметр не понмает массивы по этому  мы передаём массив и превращяем его в строку через .join который соединяет каким-то символом все элементы в массиве\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.props.onDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Delete!\"));\n  }\n\n}\n\nexport default Car;","map":{"version":3,"sources":["/home/ivan/javascript-lessons/react-lessons/src/Car/Car.js"],"names":["React","Component","Radium","Car","componentWillReceiveProps","nextProps","console","log","shouldComponentUpdate","nextState","name","trim","props","componentWillUpdate","getDerivedStateFromProps","prevState","componentDidUpdate","getSnapshotBeforeUpdate","componentWillUnmount","render","inputClasses","push","length","style","border","boxShadow","cursor","year","onChangeName","join","onDelete"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,WAAP,C,CAEA;;AACA,MAAMC,GAAN,SAAkBH,KAAK,CAACC,SAAxB,CAAkC;AAE9BG,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,SAA7C;AACH;;AAEDG,EAAAA,qBAAqB,CAACH,SAAD,EAAYI,SAAZ,EAAuB;AACxCH,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,SAAzC,EAAoDI,SAApD;AACA,WAAOJ,SAAS,CAACK,IAAV,CAAeC,IAAf,OAA0B,KAAKC,KAAL,CAAWF,IAAX,CAAgBC,IAAhB,EAAjC;AAEH;;AAEDE,EAAAA,mBAAmB,CAACR,SAAD,EAAYI,SAAZ,EAAuB;AACtCH,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,SAAvC,EAAkDI,SAAlD;AAEH,GAf6B,CAgB9B;;;AACA,SAAOK,wBAAP,CAAgCT,SAAhC,EAA2CU,SAA3C,EAAsD;AAClDT,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,SAA5C,EAAuDU,SAAvD;AAEA,WAAO;AACHA,MAAAA;AADG,KAAP;AAIH;;AAGDC,EAAAA,kBAAkB,GAAG;AACjBV,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAEH,GA9B6B,CA+B9B;;;AACAU,EAAAA,uBAAuB,GAAG;AACtBX,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;AAEDW,EAAAA,oBAAoB,GAAG;AACnBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AAGDY,EAAAA,MAAM,GAAG;AACLb,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMa,YAAY,GAAG,CAAC,OAAD,CAArB;;AAEA,QAAI,KAAKR,KAAL,CAAWF,IAAX,KAAoB,EAAxB,EAA4B;AACxBU,MAAAA,YAAY,CAACC,IAAb,CAAkB,OAAlB;AACH,KAFD,MAEO;AACHD,MAAAA,YAAY,CAACC,IAAb,CAAkB,KAAlB;AACH;;AAED,QAAI,KAAKT,KAAL,CAAWF,IAAX,CAAgBY,MAAhB,GAAyB,CAA7B,EAAgC;AAC5BF,MAAAA,YAAY,CAACC,IAAb,CAAkB,MAAlB;AACH;;AAED,UAAME,KAAK,GAAG;AACVC,MAAAA,MAAM,EAAE,gBADE;AAEVC,MAAAA,SAAS,EAAE,8BAFD;AAGV,gBAAU;AAAE;AACRD,QAAAA,MAAM,EAAE,gBADF;AAENC,QAAAA,SAAS,EAAE,+BAFL;AAGNC,QAAAA,MAAM,EAAE;AAHF;AAHA,KAAd;AAUA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAEH,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe,KAAKX,KAAL,CAAWF,IAA1B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKE,KAAL,CAAWe,IAApB,CAAT,CAFJ,EAGI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWgB,YAFzB;AAGI,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWF,IAHtB;AAII,MAAA,SAAS,EAAEU,YAAY,CAACS,IAAb,CAAkB,GAAlB,CAJf,CAIuC;AAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EASI;AAAQ,MAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWkB,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATJ,CADJ;AAaH;;AA9E6B;;AAmFlC,eAAe3B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Radium from 'radium'\nimport './Car.css'\n\n// теперь компонент Car наследуется от реакт компонента, теперь доступен локальный стейт(хз что это) и разные жизненные циклы\nclass Car extends React.Component {\n\n    componentWillReceiveProps(nextProps) {\n        console.log('Car componentWillReceiveProps', nextProps)\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('Car shouldComponentUpdate', nextProps, nextState)\n        return nextProps.name.trim() !== this.props.name.trim()\n\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        console.log('Car componentWillUpdate', nextProps, nextState)\n\n    }\n    //делает то же самое что и WillUpdate но запрещает работу с преобразованием стейта на прямую\n    static getDerivedStateFromProps(nextProps, prevState) {\n        console.log('Car getDerivedStateFromProps', nextProps, prevState)\n\n        return {\n            prevState\n\n        }\n    }\n\n\n    componentDidUpdate() {\n        console.log('Car componentDidUpdate')\n\n    }\n    //позволяет получить не изменённое дом дерево ещё до обновления\n    getSnapshotBeforeUpdate() {\n        console.log('Car getSnapshotBeforeUpdate')\n    }\n\n    componentWillUnmount() {\n        console.log('Car componentWillUnmount')\n    }\n\n\n    render() {\n        console.log('Car render')\n        const inputClasses = ['input']\n\n        if (this.props.name !== '') {\n            inputClasses.push('green')\n        } else {\n            inputClasses.push('red')\n        }\n\n        if (this.props.name.length > 4) {\n            inputClasses.push('bold')\n        }\n\n        const style = {\n            border: '3px solid #ccc',\n            boxShadow: '0 4px 5px 0 rgba(0,0,0, .14)',\n            ':hover': { //псевдоселектор с которым при наведении мышки на обьект он будет выделятся\n                border: '2px solid #aaa',\n                boxShadow: '0 4px 15px 0 rgba(0,0,0, .25)',\n                cursor: 'pointer'\n            }\n        }\n\n        return (\n            <div className='Car' style={style}>\n                <h3>Car name: {this.props.name}</h3>\n                <p>Year: <strong>{this.props.year}</strong></p>\n                <input\n                    type='text'\n                    onChange={this.props.onChangeName}\n                    value={this.props.name}\n                    className={inputClasses.join(' ')} //данный параметр не понмает массивы по этому  мы передаём массив и превращяем его в строку через .join который соединяет каким-то символом все элементы в массиве\n                />\n                <button onClick={this.props.onDelete}>Delete!</button>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Car"]},"metadata":{},"sourceType":"module"}