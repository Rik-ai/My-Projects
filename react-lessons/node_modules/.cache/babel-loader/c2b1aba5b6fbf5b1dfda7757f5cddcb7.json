{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript-lessons/react-lessons/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Car from './Car/Car';\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary';\nimport Counter from './Counter/Counter';\n\nclass App extends Component {\n  constructor(props) {\n    // так как наследуемся от базового класса реакт компонента то необходимо вызвать метод супер, что бы конструктор отработал правильно\n    super(props);\n\n    this.toggleCarsHandler = () => {\n      this.setState({\n        showCars: !this.state.showCars\n      });\n    };\n\n    this.state = {\n      cars: [{\n        name: 'Ford',\n        year: 2018\n      }, {\n        name: 'Audi',\n        year: '2016'\n      }, {\n        name: 'Mazda',\n        year: 2010\n      }],\n      pageTitle: 'React components',\n      showCars: false\n    };\n  }\n\n  onChangeName(name, index) {\n    const car = this.state.cars[index];\n    car.name = name;\n    const cars = [...this.state.cars]; //получим новый склонированный массив т.к. когда мы меняем какое-то состояние мы должны создавать клоны\n\n    cars[index] = car;\n    this.setState({\n      cars\n    });\n  }\n\n  deleteHandler(index) {\n    const cars = this.state.cars.concat(); //получим новый склонированный массив т.к. когда мы меняем какое-то состояние мы должны создавать клоны\n\n    cars.splice(index, 1); //splice метод для удаления элемента, 1 значение индех элемента 2е значение количество удаляемых элементов\n\n    this.setState({\n      cars\n    });\n  } //1) вызывается тогда когда произошла инициализация реакт компонента, подготовлены все параметры и реакт компонент готов что бы его зарендерили (замаунтен)\n\n\n  componentWillMount() {\n    console.log('App componentWillMount');\n  } //3) сообщает о том что HTML реакта готов и его можно преобразовывать\n\n\n  componentDidMount() {\n    console.log('App consoleDidMount');\n  } //2) формирует конечный JSX который будет представлен в виде HTML\n\n\n  render() {\n    console.log('App render');\n    const divStyle = {\n      textAlign: 'center'\n    };\n    let cars = null;\n\n    if (this.state.showCars) {\n      cars = this.state.cars.map((car, index) => {\n        return React.createElement(ErrorBoundary, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(Car, {\n          name: car.name,\n          year: car.year,\n          onDelete: this.deleteHandler.bind(this, index),\n          onChangeName: e => this.onChangeName(e.target.value, index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      style: divStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.props.title), React.createElement(Counter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      style: {\n        marginTop: 20\n      },\n      className: 'AppButton',\n      onClick: this.toggleCarsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Toggle cars\"), React.createElement(\"div\", {\n      style: {\n        width: 400,\n        margin: 'auto',\n        paddingTop: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, cars));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ivan/javascript-lessons/react-lessons/src/App.js"],"names":["React","Component","Car","ErrorBoundary","Counter","App","constructor","props","toggleCarsHandler","setState","showCars","state","cars","name","year","pageTitle","onChangeName","index","car","deleteHandler","concat","splice","componentWillMount","console","log","componentDidMount","render","divStyle","textAlign","map","bind","e","target","value","title","marginTop","width","margin","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Car from './Car/Car'\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary'\nimport Counter from './Counter/Counter'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    // так как наследуемся от базового класса реакт компонента то необходимо вызвать метод супер, что бы конструктор отработал правильно\n    super(props)\n\n    this.state = {\n      cars: [\n        { name: 'Ford', year: 2018 },\n        { name: 'Audi', year: '2016' },\n        { name: 'Mazda', year: 2010 }\n      ],\n      pageTitle: 'React components',\n      showCars: false\n    }\n  }\n\n\n  toggleCarsHandler = () => {\n    this.setState({\n      showCars: !this.state.showCars\n    })\n  }\n\n  onChangeName(name, index) {\n    const car = this.state.cars[index]\n    car.name = name\n    const cars = [...this.state.cars] //получим новый склонированный массив т.к. когда мы меняем какое-то состояние мы должны создавать клоны\n    cars[index] = car\n    this.setState({ cars })\n  }\n\n  deleteHandler(index) {\n    const cars = this.state.cars.concat() //получим новый склонированный массив т.к. когда мы меняем какое-то состояние мы должны создавать клоны\n    cars.splice(index, 1) //splice метод для удаления элемента, 1 значение индех элемента 2е значение количество удаляемых элементов\n\n\n    this.setState({ cars })\n  }\n\n  //1) вызывается тогда когда произошла инициализация реакт компонента, подготовлены все параметры и реакт компонент готов что бы его зарендерили (замаунтен)\n  componentWillMount() {\n    console.log('App componentWillMount')\n  }\n  //3) сообщает о том что HTML реакта готов и его можно преобразовывать\n  componentDidMount() {\n    console.log('App consoleDidMount')\n  }\n\n  //2) формирует конечный JSX который будет представлен в виде HTML\n  render() {\n    console.log('App render')\n    const divStyle = {\n      textAlign: 'center'\n    }\n\n    let cars = null\n\n    if (this.state.showCars) {\n      cars = this.state.cars.map((car, index) => {\n        return (\n          <ErrorBoundary key={index}>\n\n            <Car\n              name={car.name}\n              year={car.year}\n              onDelete={this.deleteHandler.bind(this, index)}\n              onChangeName={e => this.onChangeName(e.target.value, index)}\n            />\n          </ErrorBoundary>\n        )\n      })\n    }\n\n    return (\n      <div style={divStyle}>\n        {/* <h1>{this.state.pageTitle}</h1> */}\n        <h1>{this.props.title}</h1>\n\n        <Counter />\n\n        <hr />\n\n\n        <button\n          style={{ marginTop: 20 }}\n          className={'AppButton'}\n          onClick={this.toggleCarsHandler}\n        >Toggle cars</button>\n\n        <div style={{\n          width: 400,\n          margin: 'auto',\n          paddingTop: '20px'\n        }}>\n          {cars}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}